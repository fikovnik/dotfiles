return {
  -- {
  --   "nvim-neotest/neotest",
  --   dependencies = {
  --     "nvim-lua/plenary.nvim",
  --     "rouge8/neotest-rust",
  --     "stevanmilic/neotest-scala",
  --   },
  --   keys = {
  --     {
  --       "<Leader>Tn",
  --       function()
  --         require("neotest").run.run()
  --       end,
  --       desc = "Run nearest test",
  --     },
  --     {
  --       "<Leader>Tf",
  --       function()
  --         require("neotest").run.run(vim.fn.expand("%"))
  --         require("neotest").summary.open()
  --       end,
  --       desc = "Run all tests in file",
  --     },
  --     {
  --       "<Leader>Ta",
  --       function()
  --         require("neotest").run.run(vim.fn.getcwd())
  --         require("neotest").summary.open()
  --       end,
  --       desc = "Run all tests in suite",
  --     },
  --   },
  --   config = function()
  --     local neotest = require("neotest")
  --
  --     neotest.setup({
  --       icons = {
  --         failed = "",
  --         passed = "",
  --         running = "奈",
  --         unknown = "",
  --       },
  --       adapters = {
  --         require("neotest-rust")({
  --           args = { "--no-capture" },
  --         }),
  --         require("neotest-scala")({
  --           -- Command line arguments for runner
  --           -- Can also be a function to return dynamic values
  --           args = { "--no-color" },
  --           -- Runner to use. Will use bloop by default.
  --           -- Can be a function to return dynamic value.
  --           -- For backwards compatibility, it also tries to read the vim-test scala config.
  --           -- Possibly values bloop|sbt.
  --           runner = "bloop",
  --           -- Test framework to use. Will use utest by default.
  --           -- Can be a function to return dynamic value.
  --           -- Possibly values utest|munit|scalatest.
  --           framework = "munit",
  --         }),
  --       },
  --     })
  --
  --     vim.keymap.set("n", "<Leader>Tu", function()
  --       neotest.summary.toggle()
  --     end, { desc = "Toggle testing UI" })
  --   end,
  -- },
}
